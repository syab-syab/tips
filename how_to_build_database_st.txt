データベース設計
----------------------------------------------------------------------
用語

テーブル    .... 表形式でデータを管理しているもの

カラム    .... テーブルの列

レコード    .... テーブル行

--------------------------------------------------------------------
設計

・何をデータとして保存するか
  ┃
  ┣━ システムで使用するもの(商品情報など)
  ┃
  ┗━ ユーザーが登録するもの(氏名など)

  * 最初にやること
    ┃
    ┣━ データを抽出する
    ┃
    ┗━ エンティティ(実体)を定義する

・どのような形式で保存するか
  ┃
  ┣━ 主キーが必要
  ┃   ┃
  ┃   ┣━ 値を指定すれば1行のレコードを特定できる
  ┃   ┃
  ┃   ┣━ テーブル内に必ず一つだけ存在
  ┃   ┃
  ┃   ┗━ テーブルは重複データを持てない
  ┃
  ┣━ 第一正規形
  ┃   ┃
  ┃   ┣━ 正規形 = 一貫性と効率性を持った形でデータを保持するためのデータ形式
  ┃   ┃
  ┃   ┣━ 正規化 = 一貫性と効率性を持つようにデータベースを設計する
  ┃   ┃
  ┃   ┗━ 第一正規形 = 1つのセルの中には1つの値しか含まない。効率よく検索ができる
  ┃
  ┗━ 関数従属性
      ┃
      ┣━ y = f(x) : 入力xに対して出力yが決まる
      ┃
      ┣━ yはxに従属する(xが決まるとyが決まるみたいな) : {x} → {y}
      ┃
      ┣━ 1つのセルに1つの値の方針も関数従属性(主キーが決まると他のセルの値も全部決まる)
      ┃
      ┗━ テーブル設計では全ての列が関数従属性を満たすように整理していく

・オペレーションミスを防ぐ
  ┃
  ┣━ テーブルを分割する
  ┃   ┃
  ┃   第二正規形
  ┃    ┃
  ┃    ┣━ 第一正規形から部分関数従属を排除
  ┃    ┃
  ┃    ┣━ 部分関数従属 = 主キーの一部に対して従属する列がある
  ┃    ┃
  ┃    ┗━ テーブル分割でデータに矛盾がなくなる
  ┃
  ┗━ 第三正規形
      ┃
      ┣━ 第二正規形から推移的関数従属を排除
      ┃
      ┣━ 推移的関数従属 = テーブル内に段階的な従属関係がある
      ┃
      ┗━ テーブルを分割すると、他のデータと紐付かないデータも登録できる

・ポイント
  ┃
  ┣━ 第三正規形まで正規化すれば基本OK
  ┃
  ┣━ 第六正規形まで存在するけど、第三正規形までで充分なケースが多い
  ┃
  ┗━ データに矛盾が生じないことが何より重要


・理想形(多分)

  生徒(学部と紐づけ)
  |生徒ID| 名前 |学部ID|
  |   1  | 田中 |   1  |
  |   2  | 山田 |   3  |

  科目
  |科目ID|科目名|
  |  1   |心理学|
  |  2   |栄養学|

  履修科目(生徒と科目の紐づけ)
  |生徒ID|科目ID|
  |  1   |  1   |
  |  1   |  2   |
  |  2   |  2   |

  学部
  |学部ID|学部名|
  |  1   |農学部|
  |  2   |薬学部|
  |  3   |工学部|

-------------------------------------------------------------------------------------
ER図

・テーブルとテーブルを線でつなぎ、中身の種類と関係性を見やすくしたもの

・ER図を使うことで関係を整理

・テーブル間における関係として 1対1、1対多、多対多 がある

・基本的に1対多

* 1対1
    ┃
    ┣━ あまり登場しない
    ┃
    ┗━ 1つのテーブルにまとめればOK

* 1対多
    ┃
    ┣━ 一番登場する
    ┃
    ┗━ 正規化によって生まれる関連はこれ

* 多対多
    ┃
    ┣━ 多対多は登場するが、テーブル設計上はNG
    ┃
    ┣━ 両方を紐付けることができない
    ┃
    ┗━ 無理やり紐付けると正規化ができてない状態に
  
  ※多対多の対策
      ┃
      ┣━ 中間テーブルを作る
      ┃
      ┣━ 1対多の関係となる
      ┃
      ┗━ 正規化していけば自然とこの形になる

---------------------------------------------------------------------------------------
テーブルの定義

テーブル名
|カラム名|データ型|PK(主キー)|NOT NULL|デフォルト|

・データ型
    ┃
    ┣━ データの種類のこと
    ┃
    ┣━ INT:整数を入れる列
    ┃
    ┣━ VARCHAR:文字列を入れる列
    ┃
    ┗━ DATE:日付を入れる列

例)
生徒テーブル
students
| カラム名 |データ型    |NOT NULL|デフォルト|
|   id     |  INT       |   〇    |        |
|  name    |VARCHAR(100)|   〇    |        |   
|faculty_id|  INT       |   〇    |        |

学部テーブル
faculties
|カラム名|データ型   |PK(主キー)|NOT NULL|デフォルト|
|  id    |  INT      |   〇　　|   〇    |
| name   |VARCHAR(20)|         |   〇    |

科目テーブル
subjects
|カラム名|データ型    |PK(主キー)|NOT NULL|デフォルト|
|   id   |  INT       |   〇?    |   〇   |         |
|  name  |VARCHAR(100)|          |   〇   |         |

履修科目テーブル
subjects_records/redistered_subjects
|カラム名   |データ型|PK(主キー)|NOT NULL|デフォルト|
|students_id|  INT   |         |   〇    |         |
|subjects_id|  INT   |         |   〇    |         |

※PKは{students_id, subjects_id}の組み合わせ

・ポイント
    ┃
    ┣━ テーブル名、カラム名、データ型、PK、NOT NULL、デフォルトを考えればOK
    ┃
    ┗━ 外部キー制約、ユニーク制約、チェック制約、オートインクリメントも考慮する

・テーブル定義後にやること
    ┃
    ┗━ インデックスの設定してパフォーマンス向上させる(データの検索の高速化とか)

--------------------------------------------------------------------------------
まとめ : 手順

論理設計
    ┃
    ┣━ データの抽出
    ┃
    ┣━ エンティティの定義
    ┃
    ┣━ 正規化
    ┃
    ┗━ ER図

物理設計
    ┃
    ┣━ テーブル定義
    ┃
    ┗━ インデックス設計


まとめ : 設計のポイント

・要件を満たすテーブル/カラムを作成する

・必要データはアプリケーションが決める

・要件定義をしっかり行う＆理解する

・データに矛盾が生じないように正規化する


まとめ : 正規化のポイント

・【第一正規形】1つのセルに値が一つだけか

・【第二正規形】主キーの一部だけしか利用していないのに一意に定まる列が存在していないか

・【第三正規形】主キー以外の列同士(多段階)で従属する列は存在していないか