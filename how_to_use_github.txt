GitHub(Git)の使い方
--------------------------------------------------------------------------------
基本的な用語

リポジトリ    .... コードの変更履歴を記録する場所
                   ローカルとリモート(Github上)のどちらにも作成する
                   どちらも同じ名前にする。

ワークツリー    .... 手元の作業環境

ステージ    .... リポジトリの前のコード変更履歴の置き場所

ブランチ    .... 分岐して開発するための機能
                 幹であるmainから枝分かれしたもの
                 コードの修正が終わってプルリクが済んだら剪定して幹であるmainに
                 変更内容を反映させる

HEAD      .... 自分の今居るブランチ

マージ    .... ブランチで行った変更内容をmainに反映させる

コンフリクト    .... 2人以上の開発者が同じファイルの同じ箇所を別々のブランチで変更したとき
                     マージする際に起きるエラー

プッシュ    .... GitHub上にコードをアップすること

プル    .... ローカルの方にリモートリポジトリの変更内容を取り込む

フェッチ    ..... リモートの変更をローカルに取り込むが反映はしない(反映にはマージが必要)
                  コンフリクトが起きそうなときはプルよりフェッチの方が良い
                  例) mainブランチにいるときはプル
                      他のブランチならフェッチ + マージ
                      と使い分ける

プルリクエスト    .... 変更内容が問題ないか他の開発者にレビューをさせて
                       問題なければmainに取り込む
--------------------------------------------------------------------------------
基本的な流れ

ローカルの作業ディレクトリに移動
↓
※必要なら git clone パス でリモートの内容をローカルにコピー
↓


--------------------------------------------------------------------------------
基本的なコマンド

ローカル
  ┃
  ┣━ git init   .... ローカルリポジトリを作成。最初に一度だけ実行する。
  ┃
  ┣━ git add ファイル名   .... ステージに変更履歴を記録する。
  ┃                            git add . で全変更ファイルをaddできる
  ┃
  ┣━ git commit   .... 変更をリポジトリに記録。任意でメッセージを付けることもできる
  ┃                    git commit -m "任意のメッセージ" でメッセージを残せる
  ┃
  ┣━ git status     ....   変更ファイルを確認できる
  ┃
  ┣━ git diff     .... リポジトリとワークツリーの差分を確認できる
  ┃                    つまり変更したファイルの内容を確認できる
  ┃                    git diff --staged でリポジトリとステータスの差分を確認できる
  ┃
  ┣━ git log    .... 変更履歴を確認できる
  ┃
  ┗━ git restore    .... 変更を元に戻す
                         git restore ファイル名 でワークツリーの変更を取り消す
                         git restore --staged ファイル名 でステージに上げた変更をワークツリーに戻す

ブランチ
  ┃
  ┣━ git branch ブランチ名    .... ブランチの作成
  ┃
  ┣━ git branch    .... ブランチの一覧を表示
  ┃
  ┣━ git branch -a    .... リモートリポジトリ上も含めたブランチの一覧を表示
  ┃
  ┣━ git switch ブランチ名    .... 指定した名前のブランチにHEADを切り替える
  ┃
  ┣━ git switch -c ブランチ名     .... ブランチを新規作成して切り替える
  ┃
  ┣━ git merge ブランチ名     .... ブランチをマージする
  ┃
  ┣━ git merge リモート名/ブランチ名    .... GitHub(リモートリポジトリ)上にあるブランチの変更内容をマージする
  ┃
  ┗━ git branch -d ブランチ名     .... ブランチの削除(大文字で -D と入力した方が良い？)

GitHubとの通信
  ┃
  ┣━ git config --global user.name "GitHubで登録したユーザー名"   
  ┃  git config --global user.email GitHubで使ったメールアドレス
  ┃                             .... Gitの初期設定
  ┃
  ┣━ git remote add リモート名 リモートリポジトリのURL
  ┃                    .... リモートリポジトリをローカルに登録
  ┃                         リモート名を付けることで、今後はURLではなくリモート名でアクセスできる
  ┃
  ┣━ git push リモート名 ブランチ名   .... リモートリポジトリに変更内容をプッシュできる
  ┃
  ┣━ git pull リモート名 ブランチ名   .... リモートリポジトリの変更をローカルに反映する
  ┃                                        git pull と省略もできる
  ┃
  ┗━ git fetch リモート名     .... リモートの変更をローカルに取ってくる(反映はしない)

その他
  ┃
  ┣━ git clone リポジトリのパス     .... リモートリポジトリをローカルに反映

※git remote -v  .... リモートリポジトリの確認

--------------------------------------------------------------------------------------------------------------------
プルリクエストの手順

  1) mainを最新に更新

  2) ブランチ作成

  3) ファイル修正・コミット

  4) プッシュ

  5) プルリクエスト
     GitHub上のリポジトリを開いて、Pull requestsのタブをクリックする
     ↓
     New pull requestのボタンをクリック
     ↓
     base: main ← compare: 現在のブランチ名と編集する
     ↓
     Create pull requestのボタンをクリック
     ↓
     プルリクエストのタイトルを編集
     ↓
     内容を編集
     ↓
     Create pull requestボタンをクリック
     ↓
     完成

  6) コードレビュー
     Reviewesに登録した開発者がレビューできる

  7) マージ
     レビューをクリアしたらメインにマージする