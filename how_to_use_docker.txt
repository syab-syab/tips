Dockerの基本的な使い方
-------------------------------------------------------------------------------
用語

イメージ...コンテナに必要なものを記載したひな型

コンテナ....Dockerの実行環境。イメージを元に作られる
-------------------------------------------------------------------------------
基本的な流れ

アプリのコードとDockerfileを用意する
↓
それを元にイメージを作成する
↓
作成したイメージを元にコンテナを作成・起動
(作成 → 起動 → 停止 → 削除 がコンテナの基本的なサイクル)

※イメージやコンテナなど何か作成されたらls等で逐一確認する
--------------------------------------------------------------------------------
コマンドの意味

docker image build .... イメージを作る(オプションで名前やタグを付けられる。また「.(ドット)」を追記すると現在のディレクトリにあるDockerfileを参照する)

docker image ls .... 存在する(作成された)イメージを確認する

docker container run [イメージ(コンテナ)名] .... コンテナの作成と起動(オプションでポートの指定(-p)・コンテナ名をつける(--name)・バックグラウンドで実行してターミナルを占有しない(-d)・ファイル(ディレクトリ)の同期と共有(-v))

docker container stop [コンテナ名] .... コンテナの停止

docker container rm [コンテナ名] .... コンテナの削除

docker container logs [コンテナ名] .... 指定した起動中のコンテナのログを確認する

docker container ls .... コンテナの起動状態を確認する(-a のオプションを付けると停止しているものも含めてすべてのコンテナを確認できる)

docker container exec [コンテナ名] [実行したいコマンド(ex. ruby -v)] .... 実行中のコンテナ内で、新しいコマンドを実行。

docker system prune .... 使っていないコンテナやイメージを削除する(-aで強制？全削除？)

docker --help .... dockerのコマンドの一覧が表示される

docker [マネジメントコマンド(ex. image)] --help .... マネジメントコマンド(imageやcontainer)で使えるコマンドの一覧を見れる

